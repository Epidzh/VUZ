from matplotlib import pyplot
from numpy import arange
from math import fabs, sqrt, log
from scipy.stats import kstest, ks_2samp
from scipy.stats import uniform


def get_emp_func(data, x):
    if x < data[0]:
        return 0
    elif x >= data[-1]:
        return 1
    else:
        i = 0
        while x >= data[i]:
            i += 1
        return i / len(data)


def first(data, a, b):
    N = len(data)
    fig = pyplot.figure()
    ax = fig.gca()
    ax.set_yticks(arange(0, 1.1, 0.1))
    pyplot.grid(True)
    x = list([i for i in arange(a, b, 0.01)])
    dn = -100
    prev_dn = -100
    for i in range(len(x) - 1):
        y = get_emp_func(data, x[i])
        pyplot.plot([x[i], x[i + 1]], [y, y], color='blue', linewidth=0.5)
    for i in range(len(x) - 1):
        y = (x[i] - a) / (b - a)
        pyplot.plot([x[i], x[i + 1]], [y, y], color='red', linewidth=0.5)
    # pyplot.show()

    ans = [0 for i in range(9)]
    ans[0], ans[1], ans[2] = a, b, N
    for i in range(N):
        # y = get_emp_func(data, data[i]) + 1 / N
        # y2 = get_emp_func(data, data[i])
        y = (i+1) / N
        y2 = i / N
        Fx = ((data[i] - a) / (b - a))
        dn = max(dn, max(fabs(y - Fx), fabs(y2 - Fx)))
        if dn != prev_dn:
            ans[5] = data[i]
            ans[6] = Fx
            ans[7], ans[8] = y, y2
            prev_dn = dn
    ans[3], ans[4] = dn, dn * sqrt(N)
    print(ans)
    print(kstest(data, lambda param: uniform.cdf(param, loc=a, scale=b-a)))
    print()


def second(data1, data2):
    N = len(data1)
    M = len(data2)
    fig = pyplot.figure()
    ax = fig.gca()
    ax.set_yticks(arange(0, 1.1, 0.1))
    pyplot.grid(True)
    x = list([i for i in arange(a, b, 0.01)])
    for i in range(len(x) - 1):
        y = get_emp_func(data1, x[i])
        pyplot.plot([x[i], x[i + 1]], [y, y], color='red', linewidth=0.5)
    for i in range(len(x) - 1):
        y = get_emp_func(data2, x[i])
        pyplot.plot([x[i], x[i + 1]], [y, y], color='blue', linewidth=0.5)
    # pyplot.show()

    dnm = -100
    prev_dnm = -100
    ans = [0 for i in range(9)]
    ans[0], ans[1] = N, M
    for j in range(N):
        for k in range(M):
            FN_xj, FN_xj_0 = (j + 1) / N, j / N
            FM_yk, FM_yk_0 = (k + 1) / M, k / M
            FN_yk = get_emp_func(data1, data2[k])
            FM_xj = get_emp_func(data2, data1[j])
            dnm = max([dnm, fabs(FN_xj - FM_xj), fabs(FN_xj_0 - FM_xj), fabs(FN_yk - FM_yk), fabs(FN_yk - FM_yk_0)])
            if dnm - prev_dnm > 0.0001:
                ans[2] = dnm
                ans[3] = dnm * sqrt(N * M / (N + M))
                ans[4] = data1[j] if dnm == max(fabs(FN_xj - FM_xj), fabs(FN_xj_0 - FM_xj)) else data2[k]
                ans[5] = get_emp_func(data1, ans[4])
                ans[6] = get_emp_func(data1, ans[4]) - 1 / N
                ans[7] = get_emp_func(data2, ans[4])
                ans[8] = get_emp_func(data2, ans[4])
                # ans[8] = ans[7]
                prev_dnm = dnm
    print(ans)
    print(ks_2samp(data1, data2))
    print()

def third(data, a, b):
    N = len(data)
    ans = [0 for i in range(9)]
    ans[0], ans[1], ans[2] = a, b, N
    dn_plus = -100
    prev_dn_plus = -100
    Fx=lambda x:(x-a)/(b-a)if a<=x<b else 0 if x<a else 1
    for j in range(1, N):
        fn_xj = j / N
        fn_xj_0 = (j-1) / N
        dn_plus = max([dn_plus, fn_xj - Fx(data[j]), fn_xj_0 - Fx(data[j])])
        if dn_plus != prev_dn_plus:
            prev_dn_plus = dn_plus
            ans[3] = dn_plus
            ans[4] = ans[3]*sqrt(N)
            ans[5] = data[j]
            ans[6] = Fx(data[j])
            ans[7] = fn_xj + 1/N
            ans[8] = fn_xj_0 + 1/N
    print(ans)
    s_alpha = sqrt(-0.5 * log(0.05))
    print(s_alpha)


def fourth(data, a, b):
    N = len(data)
    ans = [0 for i in range(9)]
    ans[0], ans[1], ans[2] = a, b, N
    dn_plus = -100
    prev_dn_plus = -100
    Fx = lambda x: (x - a) / (b - a) if a <= x < b else 0 if x < a else 1
    for j in range(1, N):
        fn_xj = j / N
        fn_xj_0 = (j - 1) / N
        dn_plus = max([dn_plus, Fx(data[j]) - fn_xj, Fx(data[j]) - fn_xj_0])
        if dn_plus != prev_dn_plus:
            prev_dn_plus = dn_plus
            ans[3] = dn_plus
            ans[4] = ans[3] * sqrt(N)
            ans[5] = data[j]
            ans[6] = Fx(data[j])
            ans[7] = fn_xj + 1/N
            ans[8] = fn_xj_0 + 1/N
    print(ans)
    s_alpha = sqrt(-0.5 * log(0.05))
    print(s_alpha)
    print()


def get_data_from_docx(file_name):
    from docx import Document
    doc = Document(file_name)
    data = []
    for row in doc.tables[0].rows:
        for cell in row.cells:
            if cell.text != '':
                data.append(float(cell.text.replace(",", ".")))
    return data


def save_table_to_docx(data, file_name):
    import docx
    pass
    try:
        doc = docx.Document(file_name)
    except docx.opc.exceptions.PackageNotFoundError:
        doc = docx.Document()
    table = doc.add_table(rows=len(data) // 10, cols=10)
    # table.style = 'TableGrid'
    i, j = 0, 0
    for item in data:
        table.rows[i].cells[j % 10].text = str(item)
        j += 1
        if j % 10 == 0:
            j = 0
            i += 1
    doc.add_paragraph()
    doc.save(file_name)

a = 6.4
b = 12.4
# a = 4.8
# b = 12.8

# data1 = get_data_from_docx('UD-1.docx')
# data2 = get_data_from_docx('UD-2.docx')
data1 = [11.2762, 10.05184, 9.39772, 9.75358, 9.2365, 6.48214, 11.17516, 9.1072, 11.21158, 8.60836, 8.45542, 11.34916, 10.16272, 7.5523, 10.09888, 8.37784, 8.57698, 6.57766, 8.78476, 11.6569, 8.83564, 11.31322, 7.0246, 12.1543, 8.6617, 10.56304, 11.8999, 6.97768, 12.04768, 6.81832, 8.32456, 8.66056, 10.71868, 10.80694, 8.96074, 10.68826, 7.11394, 6.72778, 8.57524, 8.3185, 11.6644, 9.49384, 9.54424, 8.0302, 12.22498, 7.73896, 7.06312, 10.1803, 9.41356, 7.56832, 7.08766, 11.49196, 9.39346, 11.80672, 10.30258, 6.56272, 6.77926, 9.4447, 7.90078, 11.57968, 11.95264, 6.84946, 12.22564, 7.4422, 10.333, 7.02712, 12.11122, 9.82318, 10.96318, 9.84766, 9.55396, 7.87276, 9.7237, 8.77474, 10.6225, 11.75314, 7.02808, 10.3276, 6.82636, 6.49186, 8.6563, 12.1507, 7.88824, 6.44068, 7.18384, 11.7634, 10.01008, 6.96718, 10.53364, 6.93274, 6.96322, 10.70224, 8.8726, 10.8757, 9.47128, 10.20322, 7.444, 11.36632, 11.22298, 7.21456, 9.62158, 10.26334, 8.42374, 10.19308, 12.39808, 9.4804, 10.22272, 8.31556, 10.94074, 11.68204, 6.53254, 8.8192, 11.02522, 8.61826, 9.60676, 11.9818, 6.52654, 10.66276, 7.92118, 7.72138, 11.82328, 7.6813, 12.36532, 9.22558, 10.25074, 7.00282, 11.30842, 10.78954, 7.91578, 10.21312, 11.39098, 10.92916, 11.45986, 10.32808, 8.12278, 10.12438, 9.90982, 6.67774, 10.90612, 6.98992, 6.8116, 10.33696, 8.73808, 6.9793, 11.58958, 8.83768, 7.9897, 11.57386, 7.33798, 9.10624, 7.29052, 9.21502, 7.53856, 8.27248, 8.63782, 11.60062, 10.05916, 7.13224, 6.88084, 9.2701, 12.16342, 7.24006, 8.39758, 9.82894, 8.60986, 7.8289, 7.97536, 8.99188, 7.73548, 10.85596, 7.59226, 7.90216, 8.9677, 12.18328, 7.8001, 11.14642, 11.11348, 8.30602, 10.29424, 8.50762, 8.4112, 9.40678, 7.2055, 12.0514, 7.87918, 7.47826, 10.20316, 7.93366, 10.37956, 10.9825, 11.52076, 9.45988, 11.91046, 8.0209, 7.04002, 10.44232, 10.08106, 11.50588, 9.00982, 11.8573, 11.30176, 11.93866, 8.8099, 7.14112, 10.8331, 8.65588, 11.95738, 10.68838, 6.47206, 10.19308, 8.31922, 7.75948, 10.81414, 7.64032, 8.64766, 6.63682, 7.56706, 12.11116, 9.88168, 8.28334, 12.2221, 7.11736, 8.84626, 6.89326, 11.6761, 12.3199, 10.21414, 10.94134, 11.51542, 9.66418, 9.9979, 11.14216, 12.37168, 11.30266, 12.32962, 9.70306, 10.6189, 6.67822, 10.69042, 11.01688, 6.841, 12.30046, 10.84426, 10.0732, 8.54278, 9.42262, 10.71076, 10.02112, 7.23412, 9.7687, 9.87226, 9.72676, 11.52616, 11.20804, 10.7044, 10.10776, 10.74298, 11.7463, 10.20586, 8.89564, 9.77806, 10.3417, 10.47226, 11.19226, 10.18552, 6.4459, 11.29498, 11.27392, 6.86998, 11.0515]
data2 = [10.16932, 11.395, 11.9926, 11.9986, 6.48832, 12.33286, 7.98928, 7.4572, 6.6931, 10.93126, 9.73624, 9.62914, 7.00072, 7.40734, 7.38598, 11.23024, 11.50786, 6.6121, 10.59196, 10.1632, 6.64348, 8.59498, 8.54176, 11.14168, 8.89324, 11.85802, 12.22774, 6.85198, 6.97114, 7.46464, 11.61562, 12.33808, 8.40508, 11.3509, 6.47962, 10.79098, 11.5039, 8.76244, 8.26762, 9.47098, 8.95762, 11.20804, 9.7996, 8.44168, 7.07686, 7.35478, 11.9419, 7.90318, 10.75912, 11.31814, 7.01548, 8.69506, 6.89476, 10.76752, 11.8732, 10.46236, 10.17136, 10.83352, 11.87128, 11.50348, 7.80514, 8.77306, 9.3691, 12.11764, 7.03252, 7.21348, 8.971, 8.72746, 11.96506, 11.58076, 12.2266, 12.04666, 10.86892, 11.52844, 10.32892, 9.89716, 10.62838, 6.46204, 8.0773, 9.00178, 6.94594, 8.58604, 10.8988, 10.06666, 11.36896, 9.73168, 11.20114, 6.76474, 6.82438, 8.4907, 9.36286, 6.5419, 12.03622, 9.30142, 6.79996, 7.05364, 6.64096, 6.4354, 11.99722, 6.52294, 11.79994, 8.7223, 11.88454, 7.3108, 9.09676, 7.34272, 11.20348, 9.63874, 11.89954, 6.57382, 10.68652, 9.47008, 6.79798, 11.74138, 7.279, 7.62532, 11.03176, 9.62206, 7.04422, 6.4525, 10.26214, 8.36674, 7.79032, 12.09274, 7.26826, 8.42224, 10.78636, 7.20652, 10.26562, 10.53358, 6.7015, 6.85426, 9.63784, 10.53802, 10.89316, 12.33982, 11.68096, 9.06016, 12.25246, 10.73812, 7.19578, 9.85564, 8.44252, 10.03504, 6.56998, 9.13426, 8.35384, 11.57602, 8.01118, 8.47444, 7.1785, 9.97582, 11.11096, 6.46396, 7.91632, 9.2461, 6.90874, 8.12986, 10.7602, 7.72222, 8.35534, 7.09984, 11.19022, 10.21222, 6.44764, 7.60294, 11.65348, 8.77324, 9.24532, 8.8558, 9.15922, 11.60938, 11.66308, 10.31074, 11.66398, 11.45302, 8.1262, 9.97084, 7.93474, 7.44184, 7.38376, 12.31102, 9.72238, 9.50392, 11.51722, 6.96484, 7.75066, 7.6618, 7.03312, 8.51368, 11.10532, 7.1521, 9.92254, 8.377, 8.10262, 7.62658, 7.13452, 10.0225, 10.98634, 8.14996, 11.5447, 10.70266, 10.8712, 8.9695, 10.8004, 9.75106, 7.51972, 9.27868, 9.02746, 11.64028, 8.80252, 8.28172, 10.95802, 10.69828, 12.2008, 6.45466, 10.64296, 8.73364, 9.07312, 11.85838, 11.73178, 11.68006, 11.60494, 11.78998, 11.21386, 11.2573, 11.73748, 6.47164, 10.10044, 6.86116, 10.22566, 11.62888, 9.31216, 10.01296, 6.54256, 7.3402, 7.49212, 10.28398, 7.43632, 8.13304, 12.26152, 10.24432, 8.89282, 7.50274, 9.82126, 9.80626, 10.78708, 7.786, 8.97982, 11.57368, 10.75918, 9.84748, 10.22488, 12.37576, 10.43554, 10.73194, 11.56672, 6.6331, 9.94078, 11.64586, 11.42008, 11.30836, 7.94602, 9.3976, 11.17318, 9.32458, 8.70148, 8.9059, 12.20062, 7.74976]
# save_table_to_docx(data1, "result1.docx")
# save_table_to_docx(sorted(data1), "result1.docx")
# save_table_to_docx(data2, "result2.docx")
# save_table_to_docx(sorted(data2), "result2.docx")
# data1 = [-1.35208,-0.54556,1.17221,2.63488,0.06978,0.96216,1.58949,0.62034,-0.14301,2.79834,0.21163,-0.68933,1.16709,-1.91440,-0.37726,1.52140,-1.06602,0.90777,0.03442,-2.10948,2.98451,-0.63790,-1.53061,-0.23068,1.98755,-0.33023,0.43977,-0.98385,-1.11701,1.08470,2.57256,2.13476,1.43153,1.06584,0.45748,2.61986,0.04828,2.00265,-2.13748,0.12556,0.76103,0.67368,0.77676,2.43088,1.98659,1.75092,-0.41504,-0.83898,2.69686,-2.15183,1.73667,0.51606,-1.20836,2.02003,2.64472,-0.03384,0.95144,-2.00498,1.69284,-2.16289,3.15276,-1.30181,-0.87072,1.84117,2.89442,-1.86237,-1.62757,-0.41224,0.08964,-2.05212,0.69800,0.69692,-0.84399,1.36680,-0.37154,3.09451,1.99737,2.33370,2.64786,-0.32490,-0.43462,3.14126,1.61292,-1.70848,-2.15574,1.33594,0.40606,2.46124,-0.00529,1.42114,-1.55959,1.25768,-0.95553,-1.66646,1.55297,1.82841,-1.48842,0.39222,0.12325,-0.31126,-2.16932,2.02190,-2.10822,-0.45596,-1.31127,-0.15973,0.45000,-0.76182,2.94777,-1.59012,1.38110,3.00778,-0.27353,2.87110,0.18677,0.07996,2.86181,1.44303,-1.87716,1.69020,0.13392,-1.39938,-0.76748,-0.48165,0.13441,-0.67948,2.89937,-2.06422,0.84914,-0.61530,2.88348,0.37801,-0.10182,2.98143,0.55994,2.03032,-0.83464,0.16620,1.23036,-1.02477,2.70121,-0.74625,-1.66899,0.35700,-0.10704,-2.05184,0.33868,-0.22810,2.58384,0.28341,2.06035,-1.73004,-1.14797,-0.82067,1.19575,-1.06278,-1.66404,-1.89889,-1.18284,2.66661,2.29778,1.70639,1.66358,-1.75974,2.08108,1.31977,-0.68344,2.64703,-0.10869,1.29684,2.71776,-0.85257,0.46133,2.08697,-0.52779,2.10319,0.53140,-2.26926,0.20679,2.12585,-0.17222,1.57948,-0.30218,2.57333,-1.92171,-2.12070,0.99810,1.85745,0.65581,-2.06697,1.80399,2.56299,-1.81314,-2.17845,2.63026,1.16266,-0.16204,2.39359,-1.31011,0.57419,-0.16842,-1.66547,1.45958,1.36460,0.04124,-0.47686,2.85724,2.10292,0.94918,0.52134,0.85706,0.53624,2.59979,1.46200,1.04688,-1.49849,1.11099,-2.18142,2.29322,3.05117,1.67837,1.69372,1.51807,1.93528,1.26362,0.99708,0.21840,-0.77777,-1.39602,-0.35036,3.15171,0.72687,2.53379,-1.01801,0.04844,-2.23312,-1.81897,0.39632,-1.02340,3.06542,-1.69005,2.48165,0.13953,-0.95377,-1.23850,0.77076,0.28990,-0.98050,-1.51713,0.47778,1.75108,0.28852,-1.85615,-0.55870,-0.17865,2.47725,-1.65711,2.30471,1.75664,-0.09714,-1.57263,1.33897,0.50275,2.96856,2.58345,2.57636,-2.06174,1.36845,0.93450,0.27254]
# data2 = [0.21735,-1.13219,2.32281,-1.49271,0.31410,-1.09039,-0.18448,0.08273,-1.63967,-0.37665,0.93741,2.62608,-0.90823,1.76687,1.51255,-0.87880,0.54515,-0.96581,-1.57697,0.55120,-0.28953,-1.91159,2.51316,2.88936,1.33079,-0.87633,-0.38963,-0.98660,2.68619,2.11518,-0.62091,1.49451,0.58481,2.48605,-2.14303,2.09307,2.90861,1.55250,2.22364,2.96356,0.62457,-1.88948,2.94145,-0.63818,2.06392,0.37438,2.26022,2.86670,1.58130,-1.61817,-1.70441,2.13212,0.87114,-1.51317,-0.98776,3.10216,1.24019,-1.16068,-1.46934,2.44485,3.09116,-1.66376,-0.70528,3.02384,2.74240,1.87626,-1.30456,2.03963,-0.23624,-1.91709,0.79040,1.15675,1.02184,-1.28657,0.14838,1.32430,0.73072,3.19764,-1.70408,1.71852,-0.89580,0.40314,2.24113,-1.01817,2.10314,-0.80367,0.97668,1.76263,-1.27964,2.12772,-1.65238,1.57387,1.41839,1.79244,-0.35190,-1.18774,-1.92232,-1.60172,-0.88337,-0.20439,2.03961,-2.11850,1.91465,-0.34217,-1.92974,0.82846,1.25669,-0.98022,-0.07795,-1.85802,0.34446,0.63596,-0.61409,-0.08889,-1.90125,2.95734,-0.79663,-2.01763,1.57937,-0.47934,-0.09076,2.88898,0.17819,0.81572,1.43841,-0.86615,0.48729,3.08439,-2.05344,1.63921,1.80108,-0.26038,2.32462,2.69428,0.96375,1.43874,0.81570,2.76303,3.14071,0.81597,3.10205,0.21262,1.58999,0.46485,1.90992,2.78019,2.77007,0.22395,1.50754,0.25329,2.13328,1.35778,0.05081,1.17006,2.31170,-0.85411,-0.85735,0.58224,3.04490,-0.90790,0.27246,-1.23784,2.90366,-0.25571,2.17763,2.42192,2.82925,1.71940,-1.74153,0.12732,1.74723,-1.68961,0.80822,2.86874,2.10583,2.59104,-1.88514,2.36180,1.91867,-0.61090,-1.13323,2.69076,-2.02104,2.93738,-1.87320,0.21955,-0.56717,2.52543,2.20632,0.38078,-0.98644,-0.20973,1.03960,0.94313,1.41278,1.58559,-1.09633,1.38348,2.76858,-0.62212,-1.09204,1.27737,2.35900,1.47399,-0.06161,1.82649,3.15716,2.36681,-1.61597,0.64586,2.36059,1.85157,-2.21569,-2.16008,2.99221,-0.23068,-2.25699,-1.01174,-1.27563,2.64813,1.36872,0.90095,1.19230,2.63433,1.39573,2.24531,1.17441,2.17117,-1.61465,-0.49149,2.82408,1.83683,-2.14100,-1.00756,2.07465,-1.95697,-0.97978,-0.54325,-0.02916,1.28886,1.77127,-0.46003,2.56882,0.60846,1.12370,-2.19781,-0.46344,-2.13577,-0.42186,2.56926,2.91516,-1.34867,2.34723,0.11054,2.87017,0.71116,-0.16881,2.45327,0.21757,3.00321,-1.93073,-1.12080,1.20136,-0.28040,3.17261,0.89231,1.20719,2.41592,0.29743,1.30014]
# print(data1)
# print(data2)

first(sorted(data1), a, b)
second(sorted(data1), sorted(data2))
third(sorted(data1), a, b)
fourth(sorted(data1), a, b)