from matplotlib import pyplot
from math import sqrt, exp, log2, pi, fabs
from numpy.random import exponential, normal, uniform
from numpy import arange
from scipy.stats import norm, uniform, expon
import docx
from random import shuffle

"""Получение выборки по нормальному распределению"""
def get_random_normal(alpha, sigma, N):
    return list(normal(alpha, sigma, N))


"""Получение выборки по показательному распределению"""
def get_random_exponental(l, N):
    return list(exponential(l, N))


"""Получение выборки по равномерному распределению"""
def get_random_uniform(a, b, N):
    return list(uniform(a, b, N))


"""Получение рядов"""
def get_raws(R, a0, am, N):
    m = 1 + int(log2(N))
    print(m)
    d = (am - a0) / m
    interval_raw = []
    for i, j in [[i, i + d] for i in arange(a0, am, d)]:
        count = 0
        for k in R:
            if i <= k <= j:
                count += 1
        interval_raw.append([(i, j), count, count / N])
    return [interval_raw, [[(i + j) / 2, k, l] for (i, j), k, l in interval_raw]]


"""Получение выборочного среднего из коллекции R"""
def get_sr(R):
    ans = 0
    for xi, ni, wi in R:
        ans += xi * wi
    return ans


"""Получение выборочной дисперсии с поправкой Шеппарда"""
def get_sheppard(R, h):
    sr = get_sr(R)
    return sum([(xi - sr)**2 * wi for xi, _, wi in R]) - h**2 / 12


"""Получение выборочного среднего квадратического отклонения"""
def get_standart_deviation(sheppard):
    return sqrt(sheppard)


"""Получение индекса модального интервала"""
def get_modal_interval(group):
    max_w = 0
    index = 0
    for i in range(len(group)):
        wi = group[i][2]
        if wi >= max_w:
            index = i
            max_w = wi
    return index


"""Получение выборочной моды"""
def get_moda(group, a, b):
    index = get_modal_interval(group)
    q = group[index][2] - group[index-1][2] if index > 0 else group[index][2]
    qq = 2 * group[index][2] - (group[index-1][2] if index > 0 else 0)
    qq -= group[index+1][2] if index < len(group) - 1 else 0
    return group[index][0][0] + ((b - a) / len(group)) * (q / qq)


"""Получение выборочной медианы"""
def get_median(group, a, b):
    index = get_modal_interval(group)
    if sum([i for _, _, i in group[:index+1]]) == 0.5:
        return group[index][0][1]
    else:
        ans = ((b - a) / len(group)) / group[index][2]
        ans *= (0.5 - sum([i for _, _, i in group[:index]]))
        return group[index][0][0] + ans


"""Получение выборочного момента порядка k из коллекции R"""
def get_moment(group, k):
    ans = 0
    for xi, ni, wi in group:
        ans += (xi**k)*wi
    return ans


"""Получение выборочного коэффициента асимметрии"""
def get_skewness(R, disp):
    ans = get_moment(R, 3) - 3 * get_moment(R, 2) * get_moment(R, 1)
    return (ans + 2 * (get_moment(R, 1) ** 3)) / (disp ** 3)


"""Получение выборочного коэффициента эксцесса"""
def get_kurtosis(R, disp):
    ans = get_moment(R, 4) - 4 * get_moment(R, 3) * get_moment(R, 1)
    ans += 6 * get_moment(R, 2) * (get_moment(R, 1) ** 2)
    ans -= 3 * (get_moment(R, 1) ** 4)
    return (ans / (disp ** 4)) - 3


"""Получение информации о выборке"""
def get_info(group, assoc, a, b):
    ans = []
    sheppard = get_sheppard(assoc, (b - a) / len(assoc))
    deviation = get_standart_deviation(sheppard)
    print("Выборочное среднее:", get_sr(assoc))
    ans.append(float("%.6f" % get_sr(assoc)))
    print("Выборочная дисперсия с поправкой Шеппарда:", sheppard)
    ans.append(float("%.6f" % sheppard))
    print("Выборочное среднее квадратическое отклонение:", deviation)
    ans.append(float("%.6f" % deviation))
    print("Выборочная мода:", get_moda(group, a, b))
    ans.append(float("%.6f" % get_moda(group, a, b)))
    print("Выборочная медиана:", get_median(group, a, b))
    ans.append(float("%.6f" % get_median(group, a, b)))
    print("Выборочный коэффициент асимметрии:", get_skewness(assoc, deviation))
    ans.append(float("%.6f" % get_skewness(assoc, deviation)))
    print("Выборочный коэффициент эксцесса:", get_kurtosis(assoc, deviation))
    ans.append(float("%.6f" % get_kurtosis(assoc, deviation)))
    return [ans]


def get_emp_func(R, x):
    if x < R[0]:
        return 0
    elif x > R[-1]:
        return 1
    else:
        i = 0
        while x > R[i]:
            i += 1
        return (i-1) / len(R)


"""Отрисовка графиков"""
def draw(R, group, h):
    x1 = [(i + j) / 2 for (i, j), k, l in group]
    _, ax = pyplot.subplots(2, 1)
    ax[0].grid(True)
    ax[1].grid(True)
    print(group)
    ax[0].bar(x1, [wi / h for (_, _), _, wi in group], width=h, edgecolor='black')
    for i in range(len(R) - 1):
        y = get_emp_func(R, R[i])
        ax[1].plot([R[i], R[i+1]], [y, y], color='black', linewidth=0.5)
    pyplot.show()


def save_to_docx(R, group, assoc, file_name):
    pass
    # doc = docx.Document()
    # table1 = doc.add_table(rows=20, cols=10)
    # table1.style = 'TableGrid'
    # j = 0
    # for i in range(len(R)):
    #     table1.rows[j].cells[i % 10].text = "%.6f" % (R[i])
    #     j = j + 1 if i % 10 == 9 else j
    # doc.add_paragraph()
    #
    # table2 = doc.add_table(rows=20, cols=10)
    # table2.style = 'TableGrid'
    # j = 0
    # R.sort()
    # for i in range(len(R)):
    #     table2.rows[j].cells[i % 10].text = "%.6f" % (R[i])
    #     j = j + 1 if i % 10 == 9 else j
    # doc.add_paragraph()
    #
    # table3 = doc.add_table(rows=len(group), cols=3)
    # table3.style = 'TableGrid'
    # for i in range(len(group)):
    #     row = table3.rows[i]
    #     row.cells[0].text, row.cells[1].text, row.cells[2].text = "[{}, {}]".format(group[i][0][0], group[i][0][1]), str(group[i][1]), str(group[i][2])
    # doc.add_paragraph()
    #
    # table4 = doc.add_table(rows=len(group), cols=3)
    # table4.style = 'TableGrid'
    # for i in range(len(assoc)):
    #     row = table4.rows[i]
    #     row.cells[0].text, row.cells[1].text, row.cells[2].text = str(assoc[i][0]), str(assoc[i][1]), str(assoc[i][2])
    # doc.save(file_name)

def save_table_to_docx(data, file_name):
    import docx
    pass
    try:
        doc = docx.Document(file_name)
    except docx.opc.exceptions.PackageNotFoundError:
        doc = docx.Document()
    table = doc.add_table(rows=len(data), cols=len(data[0]))
    # table.style = 'TableGrid'
    i, j = 0, 0
    for row in data:
        for item in row:
            table.rows[i].cells[j % len(data[0])].text = str(item)
            j += 1
            if j % len(data[0]) == 0:
                j = 0
                i += 1
    doc.add_paragraph()
    doc.save(file_name)

N = 200
v = 40
alpha = (-1)**v * 0.1 * v
sigma = 0.01 * v + 1
# alpha = 2.6
# sigma = 1.26
L = 3 + (-1)**v * 0.01 * v
a = (-1)**v * 0.05*v
b = a + 3

print("Normal: alpha = {}, sigma = {}".format(alpha, sigma))
R1 = get_random_normal(alpha, sigma, N)
R1 = [0.3073386640760667,0.7470688306299174, 0.9234270346120592, 1.0416565640417792, 1.0655546350208507,
      1.2684965298049717, 1.3991699249924165, 1.5189559330928821, 1.5891996856450947, 1.7345477826985385,
      1.741276402229627, 1.772366571233328, 1.8049909489297264, 1.8101141449354898, 1.9278668651530855,
      1.947449771995648, 2.058163112710573, 2.086953745085723, 2.0969831931570924, 2.1187179522578963,
      2.1191107692240534, 2.1255670898896173, 2.1630231873965693, 2.2739729868981637, 2.275113298596386,
      2.287443151225694, 2.307903961675289, 2.5066800488544416, 2.5232496306299526, 2.5986705151442404,
      2.605979370617902, 2.6166570663917312, 2.6719328898635926, 2.7128370694247086, 2.716946967683173,
      2.723455205762387, 2.736209049918303, 2.7406728684900714, 2.7463938344985834, 2.8139071305607612,
      2.827799600921119, 2.8335334508195427, 2.8610397620511643, 2.8918111210655084, 2.9090223625024594,
      2.944953543983921, 3.042506905382127, 3.056525527484766, 3.068370854898909, 3.149575851383686, 3.159977860100194,
      3.161580669490732, 3.1988135415701042, 3.2158740993563915, 3.2216643221268946, 3.2342896416455114,
      3.270427866057358, 3.2716168532007694, 3.2852564466487504, 3.325178011817478, 3.330167327389284,
      3.3341384335532243, 3.3669419542543793, 3.375906608910577, 3.3846849176753775, 3.400126040787075,
      3.455799779867691, 3.465326931734113, 3.5137285285996436, 3.5323323732709464, 3.5517234216167797,
      3.5562264531372763, 3.56334839952553, 3.61015095737588, 3.615691486002424, 3.621000231873285, 3.641285618978589,
      3.6841570806343578, 3.697102983520917, 3.702294322536493, 3.7199069852713658, 3.72557261791665, 3.731295656145597,
      3.742722599124476, 3.7840782419971095, 3.8359005484444375, 3.873841490771614, 3.886848215032102,
      3.9037677669747146, 3.923813126376108, 3.9279412045959634, 3.944053961229344, 3.9632882120678468,
      3.9667920458060744, 3.979986610784885, 4.020689322132768, 4.032786364489346, 4.049326735760426, 4.08751892837061,
      4.16887491612535, 4.170755406606081, 4.202326478009807, 4.218949992644027, 4.227677441087622, 4.2353758748876125,
      4.240255760018028, 4.247038664775202, 4.2504507947648795, 4.255144966127334, 4.2992232676780775,
      4.317040027158926,4.329763870856881, 4.33120353598193, 4.339423836305093, 4.342956450755574, 4.353627992604172,
      4.4123689848665055, 4.421994661160932, 4.4292275771123455, 4.432186855296437, 4.451512362601443, 4.458334938555827,
      4.509429237416252, 4.510552597753207, 4.514310568041672, 4.515609139461894, 4.533684055687995, 4.551171997416979,
      4.5708659358161094, 4.604734538845393, 4.611669825496172, 4.632367178947131, 4.633263096163294, 4.649802209399448,
      4.652888833065513, 4.662384850937565, 4.680689634462366, 4.712297422715239, 4.719352693855761, 4.7358333348544965,
      4.739671716735139, 4.748119397535478, 4.775081076405629, 4.791364574674633, 4.796271553783003, 4.810040929593961,
      4.822905926615075, 4.837580409237378, 4.841226679552067, 4.8578786999380155, 4.861340206838783, 4.8900782881152915,
      4.9175557570421695, 4.924017382605319, 4.944752285356662, 5.084507400862923, 5.0877260482692, 5.1077658891822075,
      5.119772559056975, 5.189741533437127, 5.1898756980305345, 5.216961121617927, 5.232956321796997, 5.235813131775094,
      5.298004165344558, 5.339285119390568, 5.369449407442923, 5.373134835199643, 5.390057256896576, 5.395153618073784,
      5.4048152341278435, 5.437481658327172, 5.506373639071129, 5.552937928288154, 5.567354016477814, 5.594752498602462,
      5.607750621379799, 5.651069892762743, 5.661360396699656, 5.698864879546351, 5.79554460261536, 5.882029755044881,
      5.899031104531343, 5.915965229899915, 5.919995916079092, 6.019950600551197, 6.037460859800566, 6.101577661897796,
      6.175404983729622, 6.40473404180894, 6.445520034285006, 6.596504583804907, 6.627549481684625, 6.681005586194436,
      6.683989134179141, 6.703948657665558, 6.712504245050589, 7.5575751111590055, 7.684559546784451, 8.397881160803868]
shuffle(R1)
i, j = 0, 0
table = [[]]
for item in R1:
    table[-1].append(float("%.6f" % item))
    j += 1
    if j % 10 == 0:
        j = 0
        i += 1
        table.append([])
# save_table_to_docx(table, "tables1.docx")
group, assoc = get_raws(R1, min(R1), max(R1), N)
print(group)
print(assoc)
print("Проверка: ", sum([j for [_, _], j, _ in group]))
info = get_info(group, assoc, min(R1), max(R1))
draw(sorted(R1), group, (max(R1) - min(R1)) / (1 + int(log2(N))))

i, j = 0, 0
table = [[]]
for item in sorted(R1):
    table[-1].append(float("%.6f" % item))
    j += 1
    if j % 10 == 0:
        j = 0
        i += 1
        table.append([])

# save_table_to_docx(table, "tables1.docx")
save_table_to_docx(group, "tables1.docx")
save_table_to_docx(assoc, "tables1.docx")
save_table_to_docx(info, "tables1.docx")
table = []
for (i, j), ni, wi in group:
    table.append(["[{}, {}]".format("%6.f" % i, "%6.f" % j), wi, ])
norm1 = norm(alpha, sigma)
sm = 0
for (i, j), _, wi in group:
    t = norm1.cdf(j) - norm1.cdf(i)
    sm += t
    print("%.6f" % t, "%.6f" % fabs(wi - t))
print(sm)


print("\nExponental: L = {}".format(L))  # may be 1/L
R2 = get_random_exponental(1/L, N)
R2 = [0.0006404429812036956, 0.0022024807536829725, 0.0023931246976434013, 0.005081758381498118, 0.005185464043923889,
      0.005246212215160709, 0.010385165733736839, 0.01476382471752261, 0.015466337038894483, 0.016053426627251063,
      0.016556262829199146, 0.018578555912248274, 0.02038236486472219, 0.02048837779782299, 0.024321813191540594,
      0.024389617164048208, 0.02559281332320589, 0.02724419398588778, 0.027521419656961803, 0.028182213334735653,
      0.03178104502816542, 0.03216593520619335, 0.0340043802302583, 0.0341863538453268, 0.03522788570930473,
      0.0362113530875768, 0.036831282771213336, 0.037735386699296124, 0.03831319512453623, 0.03843887174088636,
      0.04177759516744141, 0.04389336626176672, 0.050542914831142184, 0.05229786984769875, 0.05363722834282064,
      0.05475372757391589, 0.061112346695184665, 0.0638495508735396, 0.06752795236301652, 0.06778714793019013,
      0.07223833085389207, 0.07257729175431345, 0.08046936257814745, 0.08051029016113001, 0.08121708986569781,
      0.08370592673525791, 0.09036900600759537, 0.0921138325008474, 0.09359491585703775, 0.09758279946818027,
      0.10008758820541913, 0.1008304586028369, 0.1013706718950416, 0.10398999495562962, 0.106649019681852,
      0.10822104825026062, 0.10847110688404123, 0.11026355264348281, 0.11128924239392579, 0.11577232274705777,
      0.11770618294480886, 0.11963974986051318, 0.12099248196974241, 0.12242762367512056, 0.12244358747078073,
      0.12433588671323118, 0.12479743048274655, 0.1261110041564178, 0.13075729717351223, 0.13868708466505436,
      0.14026467635245507, 0.14155820318805284, 0.14403883649340982, 0.14607090046906462, 0.15239807708711187,
      0.1538370693109046, 0.154856816401244, 0.155745919227326, 0.1614891019565657, 0.16213845866815435,
      0.16423103940924896, 0.16796708338172114, 0.17138320058118692, 0.17314021839265467, 0.1814490718179898,
      0.18385695664000198, 0.1864240094006132, 0.18744501645825548, 0.19311178599825674, 0.19461802170726722,
      0.19474809014215233, 0.19755428864972152, 0.19841898464847835, 0.20012903093743534, 0.20043669804304012,
      0.20667693055011624, 0.2089405664300422, 0.2106897946310817, 0.22497391067080844, 0.22573274036575935,
      0.23041850253238302, 0.2381505567653692, 0.23836503871092393, 0.23917433334471846, 0.23954284513647958,
      0.24059972200330257, 0.2492844548986594, 0.25060340965224276, 0.25103406269629336, 0.2555093189911291,
      0.2560434945321906, 0.2562544865063754, 0.2580851245685743, 0.25860729067199834, 0.26224761677689507,
      0.2653353625225506, 0.26627357405642554, 0.2674342342512792, 0.26770301013295905, 0.26932220292443104,
      0.2730363237615996, 0.2824438961172418, 0.286652616308062, 0.30135977864070596, 0.30948418247072734,
      0.3095621314750549, 0.3098068789916536, 0.3111775648505492, 0.3115476465706379, 0.3118055477886346,
      0.31187527183383235, 0.31597907695123156, 0.3161669027429631, 0.3200736241583098, 0.3221221480173545,
      0.3326713133476458, 0.3369648624217241, 0.33880557626688806, 0.3395625997092853, 0.3649348648263788,
      0.36546217924673613, 0.36603705483051147, 0.36942632019317706, 0.3727930042841978, 0.3757950029407285,
      0.37589126346812435, 0.3777156104541063, 0.3778598504557614, 0.3827065715251978, 0.3839780086720353,
      0.40336393836252404, 0.40437867455058935, 0.40495813379434575, 0.4143550468665386, 0.42147373998253707,
      0.4424759745064824, 0.44328596181710767, 0.44678195324834147, 0.45317132228750706, 0.4593046490299178,
      0.4616570963261319, 0.46277179462552476, 0.49161994052744357, 0.5124837858649676, 0.5143132538092413,
      0.5214504978781975, 0.5272263596694401, 0.5296488911219414, 0.533615487039296, 0.5445537095158639,
      0.5450994729098841, 0.5640227595474222, 0.5706075110545612, 0.5801473056007993, 0.5807497409310958,
      0.5998042214784968, 0.6071254075222526, 0.6073938343176182, 0.6191907451297046, 0.6274738780664956,
      0.628038561011444, 0.6781740438311343, 0.6856292240366064, 0.6978411038820557, 0.709721125178324,
      0.8233322705866531, 0.8235168538096649, 0.8390141940645756, 0.914644483613476, 0.9267682184646602,
      0.9337592190469827, 0.9437113978689862, 0.9464440746244266, 1.0323549700028987, 1.0358889149643942,
      1.0501074874301766, 1.2171670311963214, 1.296225148469983, 1.5552436012565531, 1.6822253474214772]
shuffle(R2)
i, j = 0, 0
table = [[]]
# for item in R2:
#     table[-1].append(float("%.6f" % item))
#     j += 1
#     if j % 10 == 0:
#         j = 0
#         i += 1
#         table.append([])
# save_table_to_docx(table, "tables2.docx")
group, assoc = get_raws(R2, 0, max(R2), N)
print(group)
print(assoc)
print("Проверка: ", sum([j for [_, _], j, _ in group]))
info = get_info(group, assoc, 0, max(R2))
draw(sorted(R2), group, max(R2) / (1 + int(log2(N))))
i, j = 0, 0
table = [[]]
for item in sorted(R2):
    table[-1].append(float("%.6f" % item))
    j += 1
    if j % 10 == 0:
        j = 0
        i += 1
        table.append([])

# save_table_to_docx(table, "tables2.docx")
save_table_to_docx(group, "tables2.docx")
save_table_to_docx(assoc, "tables2.docx")
save_table_to_docx(info, "tables2.docx")
ex = lambda x: exp(-L*x)
sm = 0
for (i, j), _, wi in group:
    t = ex(i) - ex(j)
    sm += t
    print("%.6f" % t, "%.6f" % fabs(wi - t))
print(sm)


print("\nUniform: a = {}, b = {}".format(a, b))
# R3 = get_random_uniform(a, b, N)
R3 = [4.39929450445155, 2.1704825770854073, 2.5145111369093756, 3.3362420474518535, 4.781199127164989,
      2.795293383428907, 4.960689264881181, 3.433982715142104, 3.354933579245868, 2.3909738405213297,
      2.268237490847528, 4.2806780329903065, 3.20675485191709, 3.266262676017944, 4.164525001637068,
      2.0978017941109526, 2.55711253652773, 2.7136544582769258, 4.081521099625455, 4.805400894377067,
      3.4420464763946876, 3.1929186109506595, 3.549298761093579, 4.695809769905592, 3.846492831060994,
      2.2229621094643965, 2.2109425159426936, 3.240346722767781, 4.725629195187951, 2.876853988745743,
      3.432868245151135, 3.9813183299116868, 4.167717579010301, 3.6951267679845534, 3.080259126009649,
      2.740293163028676, 3.046244890607369, 4.979149101749774, 3.944462189123645, 3.453212332573305,
      3.453799779438108, 4.550635171822445, 2.411462533231891, 3.1060317998764124, 3.3577145500976755,
      4.995701918759389, 4.6907206529398175, 2.2863962783566074, 2.314307451872534, 4.558859710542608,
      3.8731567176712707, 4.3367886105538656, 4.308325389408642, 2.4005499943092254, 4.309665571758897,
      2.0235923342013575, 2.0871567631392374, 2.1912545951283566, 4.194826211185736, 2.8286855022556123,
      2.1694050427372393, 3.25998149967233, 4.753472743441153, 3.826506585391342, 4.870263680402919,
      2.25281792001852, 4.462033270826529, 4.163953624914734, 2.9592613228111646, 3.4537929833706884,
      3.94969554835946, 3.60391583853347, 2.597693243707744, 3.951197655015054, 4.058265541268376, 4.3369783843132295,
      2.4904434341281405, 2.989631636646521, 4.815708463836841, 3.4637561872609677, 4.299628741629407,
      3.286489230485156, 2.268654585711712, 3.490290965611647, 3.1932653129621746, 4.971187884013716,
      3.4234888171823004, 2.9829441578895004, 2.700201241271299, 4.696798143732562, 4.670377600632545,
      4.78107680703808, 4.711953331539136, 2.0142257682889397, 3.566996336990846, 2.733909572363933,
      2.379619633202654, 3.30613578260749, 4.708009291647431, 3.3873315152902594, 4.471004239971685,
      2.430538448602214, 4.024559335510186, 3.695354170213686, 4.352179927219956, 4.8764098675597705,
      2.609421533704068, 4.371180060924095, 4.790305124868004, 3.2393953537508304, 2.3043562266368323,
      2.0208249674862815, 4.559154668874465, 2.3146433609842623, 3.881086777287209, 2.8743440833580127,
      4.3406353934783946, 4.530987741261388, 4.871204743313621, 3.2429653185481238, 4.701036058401752,
      4.5307065819921295, 3.314736085539045, 2.8952964635593714, 4.498049002580101, 2.899454395550064,
      2.734365914722127, 3.9804099206585226, 2.673691889536613, 4.265424868539298, 4.479846549373259,
      4.224881096106364, 3.730668540156148, 4.05988926460724, 2.81072580170438, 2.230992706091069, 3.3653450462053667,
      2.7405427565092446, 3.8520580849027093, 2.8673769465335064, 4.695642404101281, 2.8677591214135023, 3.577232826710753,
      2.3540865224131773, 4.019414823596287, 2.195297288445861, 2.706627265278996, 4.157267604993542, 3.0007373653518563,
      2.8034855605744085, 2.0504572940572623, 2.6960200076311995, 3.9608465156606285, 2.477281495010918, 2.888426126715438,
      4.231919962753382, 3.927168456884691, 4.655995965976135, 4.013092575725996, 2.092379559492027, 2.3651946788424523,
      4.8958807452391415, 3.644346358431144, 3.256344829314453, 3.2100980968917643, 4.715430706091283, 2.782733633908459,
      2.0891945914753505, 2.9316996843906464, 3.7134872796772935, 2.0331182424845027, 3.9955667124448007, 4.309830403642152,
      3.228390227673388, 3.157003166792442, 4.221913696735259, 4.386134181019817, 2.270891729462618, 4.453529337913677,
      3.7232994161826216, 2.456987269578634, 2.782412864126274, 3.983784746920291, 4.715977461303545, 3.9594351567820434,
      2.5272658549131544, 2.9906708540430946, 4.521097782075568, 4.14012895138881, 4.396986371930296, 3.3237760729322647,
      3.435650614807468, 3.667941814654424, 3.3510571768609827, 2.7980102608421453, 3.942653956131628, 2.756734845915671,
      2.1766931562772793, 2.6263502472253393, 2.8856137818951826]
i, j = 0, 0
table = [[]]
for item in R3:
    table[-1].append(float("%.6f" % item))
    j += 1
    if j % 10 == 0:
        j = 0
        i += 1
        table.append([])
# save_table_to_docx(table, "tables3.docx")
group, assoc = get_raws(R3, a, b, N)
print(group)
print(assoc)
print("Проверка: ", sum([j for [_, _], j, _ in group]))
info = get_info(group, assoc, a, b)
draw(sorted(R3), group, (b - a) / (1 + int(log2(N))))
i, j = 0, 0
table = [[]]
for item in sorted(R3):
    table[-1].append(float("%.6f" % item))
    j += 1
    if j % 10 == 0:
        j = 0
        i += 1
        table.append([])

# save_table_to_docx(table, "tables3.docx")
save_table_to_docx(group, "tables3.docx")
save_table_to_docx(assoc, "tables3.docx")
save_table_to_docx(info, "tables3.docx")

u = uniform(a, b-a)
sm = 0
for (i, j), _, wi in group:
    t = u.cdf(j) - u.cdf(i)
    sm += t
    print("%.6f" % t, "%.6f" % fabs(wi - t))
print(sm)
