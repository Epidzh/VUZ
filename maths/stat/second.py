from matplotlib import pyplot
from math import sqrt, exp, log2, pi, fabs
from numpy.random import exponential, normal, uniform
from numpy import arange
import docx


def get_random_normal(alpha, sigma, N):
    return list(normal(alpha, sigma, 200))


def get_normal(alpha, sigma, x):
    return (1 / (sqrt(2 * pi) * sigma)) * exp(-(x - alpha)**2/(2 * sigma**2))


def get_random_exponental(l, N):
    return list(exponential(l, N))


def get_exponental(l, x):
    return l * exp(-x / l)


def get_random_uniform(a, b, N):
    return list(uniform(a, b, N))


def get_uniform(a, b, x):
    return 1 / (b - a) if a <= x <= b else 0


def get_raws(R, a0, am, N):
    m = 1 + round(log2(N))
    d = (am - a0) / m
    interval_raw = []
    for i, j in [[i, i + d] for i in arange(a0, am, d)]:
        count = 0
        for k in R:
            if i <= k <= j:
                count += 1
        interval_raw.append([(i, j), count, count / N])
    return [interval_raw, [[(i + j) / 2, k, l] for (i, j), k, l in interval_raw]]


"""Получение выборочного среднего из коллекции R"""
def get_sr(R):
    ans = 0
    for xi, ni, wi in R:
        ans += xi * wi
    return ans


"""Получение выборочной дисперсии с поправкой Шеппарда"""
def get_sheppard(R, h):
    sr = get_sr(R)
    return sum([(xi - sr)**2 * wi for xi, _, wi in R]) - h**2 / 12


"""Получение выборочного среднего квадратического отклонения"""
def get_standart_deviation(sheppard):
    return sqrt(sheppard)


"""Получение индекса модального интервала"""
def get_modal_interval(group):
    max_w = 0
    index = 0
    for i in range(len(group)):
        wi = group[i][2]
        if wi >= max_w:
            index = i
            max_w = wi
    return index


"""Получение выборочной моды"""
def get_moda(group, a, b):
    index = get_modal_interval(group)
    q = group[index][2] - group[index-1][2] if index > 0 else group[index][2]
    qq = 2 * group[index][2] - (group[index-1][2] if index > 0 else 0)
    qq -= group[index+1][2] if index < len(group) - 1 else 0
    return group[index][0][0] + ((b - a) / len(group)) * (q / qq)


"""Получение выборочной медианы"""
def get_median(group, a, b):
    index = get_modal_interval(group)
    if sum([i for _, _, i in group[:index+1]]) == 0.5:
        return group[index][0][1]
    else:
        ans = ((b - a) / len(group)) / group[index][2]
        ans *= (0.5 - sum([i for _, _, i in group[:index]]))
        return group[index][0][0] + ans


"""Получение выборочного момента порядка k из коллекции R"""
def get_moment(group, k):
    ans = 0
    for xi, ni, wi in group:
        ans += (xi**k)*wi
    return ans


"""Получение выборочного коэффициента асимметрии"""
def get_skewness(R, disp):
    ans = get_moment(R, 3) - 3 * get_moment(R, 2) * get_moment(R, 1)
    return (ans + 2 * (get_moment(R, 1) ** 3)) / (disp ** 3)


"""Получение выборочного коэффициента эксцесса"""
def get_kurtosis(R, disp):
    ans = get_moment(R, 4) - 4 * get_moment(R, 3) * get_moment(R, 1)
    ans += 6 * get_moment(R, 2) * (get_moment(R, 1) ** 2)
    ans -= 3 * (get_moment(R, 1) ** 4)
    return (ans / (disp ** 4)) - 3


"""Получение информации о выборке"""
def get_info(group, assoc, a, b):
    sheppard = get_sheppard(assoc, (b - a) / len(assoc))
    deviation = get_standart_deviation(sheppard)
    print("Выборочное среднее:", get_sr(assoc))
    print("Выборочная дисперсия с поправкой Шеппарда:", sheppard)
    print("Выборочное среднее квадратическое отклонение:", deviation)
    print("Выборочная мода:", get_moda(group, a, b))
    print("Выборочная медиана:", get_median(group, a, b))
    print("Выборочный коэффициент асимметрии:", get_skewness(assoc, deviation))
    print("Выборочный коэффициент эксцесса:", get_kurtosis(assoc, deviation))


def get_emp_func(R, x):
    if x < R[0]:
        return 0
    elif x > R[-1]:
        return 1
    else:
        i = 0
        while x > R[i]:
            i += 1
        return (i-1) / len(R)


"""Отрисовка графиков"""
def draw(R, group, h):
    x1 = [(i + j) / 2 for (i, j), k, l in group]
    _, ax = pyplot.subplots(2, 1)
    ax[0].grid(True)
    ax[1].grid(True)
    ax[0].bar(x1, [wi for (_, _), _, wi in group], width=h, edgecolor='black')
    for i in range(len(R) - 1):
        y = get_emp_func(R, R[i])
        ax[1].plot([R[i], R[i+1]], [y, y], color='black', linewidth=0.5)
    pyplot.show()


def save_to_docx(R, group, assoc, file_name):
    doc = docx.Document()
    table1 = doc.add_table(rows=20, cols=10)
    table1.style = 'TableGrid'
    j = 0
    for i in range(len(R)):
        table1.rows[j].cells[i % 10].text = str(R[i])
        j = j + 1 if i % 10 == 9 else j
    doc.add_paragraph()

    table2 = doc.add_table(rows=20, cols=10)
    table2.style = 'TableGrid'
    j = 0
    R.sort()
    for i in range(len(R)):
        table2.rows[j].cells[i % 10].text = str(R[i])
        j = j + 1 if i % 10 == 9 else j
    doc.add_paragraph()

    table3 = doc.add_table(rows=len(group), cols=3)
    table3.style = 'TableGrid'
    for i in range(len(group)):
        row = table3.rows[i]
        row.cells[0].text, row.cells[1].text, row.cells[2].text = "[{}, {}]".format(group[i][0][0], group[i][0][1]), str(group[i][1]), str(group[i][2])
    doc.add_paragraph()

    table4 = doc.add_table(rows=len(group), cols=3)
    table4.style = 'TableGrid'
    for i in range(len(assoc)):
        row = table4.rows[i]
        row.cells[0].text, row.cells[1].text, row.cells[2].text = str(assoc[i][0]), str(assoc[i][1]), str(assoc[i][2])
    doc.save(file_name)


N = 200
v = 54
alpha = (-1)**v * 0.1 * v
sigma = 0.01 * v + 1
L = 3 + (-1)**v * 0.01 * v
a = (-1)**v * 0.05*v
b = a + 3

print("Normal: alpha = {}, sigma = {}".format(alpha, sigma))
# R1 = get_random_normal(alpha, sigma, N)
R1 = [1.7785951337086927, 5.594259953642906, 5.846454984407556, 3.4370454134476565, 3.3172775933739476, 7.428652304479785,
      4.742738866191493, 7.514444774685373, 1.6691113806378426, 3.554086766754308, 4.630142472825829, 7.035088503715653,
      8.246268426108248, 5.1837034948515734, 3.2279485939745904, 5.276024371739318, 6.051067410727163, 2.942196171855937,
      5.528884257111001, 4.964987550429711, 1.7696229183842962, 7.198240955547698, 6.810517052459028, 7.739168854865175,
      5.935498168744097, 4.6755280134581465, 3.2503655207494, 5.2727974347163, 5.073652811565862, 6.692614572401259,
      5.56820583321979, 3.8087718999336304, 8.383208994024688, 2.47102763087137, 3.7364267932080484, 7.843669507288911,
      5.618284032656693, 3.6723664500680977, 3.431388569227371, 5.5437956912446475, 6.519318583426048, 6.341101721152536,
      5.079240579792603, 4.454336017773964, 6.56527467341649, 4.864262546060116, 6.423321909850667, 6.554622939786717,
      6.93791472324734, 5.048865346458883, 7.9543055123067905, 6.384481895360212, 2.7482610195365584, 6.472522554016474,
      4.417850308161667, 7.3779915996600955, 7.348505198526661, 5.037592016479628, 3.144109061372509, 3.828481057053531,
      5.707806854179269, 6.674877851293542, 2.3071031968961777, 5.125219175785754, 5.458815121394677, 3.392250094988922,
      6.343783451347615, 5.396724533967117, 5.23111131524947, 4.61050285899225, 9.582881469996167, 7.436168626947862,
      4.61467496498215, 6.446877941534519, 7.947569220558039, 5.253653007626814, 5.9627721992002485, 5.783088800954507,
      7.445470760544028, 4.9700173085408395, 6.733435297814804, 5.132637918025862, 5.151242855222694, 7.956538939997266,
      6.410910005878974, 8.761740306272284, 6.6454913581238255, 2.2433301679683546, 4.4516565844248595, 4.80657150742993,
      5.93064367421095, 6.1272641779935695, 3.7007210512229607, 4.003417023964333, 5.980832994364877, 3.0636424988744793,
      5.139896474556079, 4.631837560434912, 6.279670442817106, 7.062132073451438, 6.932974985717575, 5.1643354585660175,
      4.640678443742356, 3.297720387405584, 7.7463735837084755, 6.789658189079849, 6.625273465296065, 4.729055967222231,
      5.578361306139243, 3.732443671656787, 2.416997813528914, 4.59691471576059, 4.866348611166005, 4.871401091392153,
      5.284380254990119, 4.701433032105499, 5.207627485564819, 4.665686413958602, 6.1554830252043145, 4.173189276799549,
      6.504625915959233, 4.0613418523095675, 4.6396111922508085, 5.26097650830697, 6.947550644689525, 5.924158343600769,
      6.9532355985152225, 6.586177637920293, 6.4509081847636995, 4.215088749754989, 5.578235124922315, 7.202044637106226,
      7.826195057602147, 5.369652451310048, 5.945121014360628, 3.2300826757473318, 6.904335939076747, 6.736296036766849,
      4.957534505647946, 7.107885252239784, 5.240197851962611, 5.6129362182056495, 4.939523049396217, 5.014852843614288,
      6.187306205826407, 2.698590046642277, 7.117711235199205, 5.4417240013051105, 3.8437184109571385, 3.7487817700174766,
      6.835477351759705, 7.011373776883892, 6.937592800091758, 4.7832161728537885, 4.749397701507467, 5.627094240935032,
      6.369396578351832, 9.683480401660574, 2.3119576744465475, 4.9078359955601085, 3.0195197762980626, 5.440331016547672,
      3.190009943022891, 5.811834508756212, 4.866640401684211, 5.186006453261367, 4.4688628213649775, 5.922606629419361,
      6.753812677304803, 5.155302568678718, 2.8937331429206457, 6.64301385798524, 7.7685037599634, 6.05127765705744,
      6.414613839328471, 3.224718308534714, 6.0840009265295265, 3.4902841047164728, 6.4592035323683925, 4.487932349374326,
      4.724088283720291, 5.2271129444596145, 4.7846289193587515, 4.941253267769544, 5.08570438815541, 8.222013406086845,
      5.643283640104163, 5.420541369992215, 5.9181236548641145, 5.267090826482961, 3.9916925017680738, 6.867786253556208,
      5.900688193200947, 2.098838848464665, 5.084123955383359, 7.48658864284341, 4.522481704393504, 6.507964615996637,
      0.7165192660227708, 5.391648145943636]
print(sorted(R1))
group, assoc = get_raws(R1, min(R1), max(R1), N)
print(group)
print(assoc)
print(sum([j for [_, _], j, _ in group]))
get_info(group, assoc, min(R1), max(R1))
# draw(sorted(R1), group, (max(R1) - min(R1)) / (1 + round(log2(N))))
save_to_docx(R1, group, assoc, "tables1.docx")

print("\nExponental: L = {}".format(L))  # may be 1/L
# R2 = get_random_exponental(1/L, N)
R2 = [0.3503157196982296, 0.023902043598772852, 0.5496983144334526, 0.406333111884056, 0.05637940096227593,
      0.04489448149380057, 0.18054478618911182, 0.21200230444513932, 0.550744862693785, 0.17771507242699777,
      0.3817831019182052, 0.10339644246118196, 0.4816167746741224, 0.198587209125452, 0.1386663823230612,
      0.13465052221754303, 0.13854418046054676, 0.08615581614055316, 0.16598972074568608, 0.0036551515257315648,
      0.18002554764486742, 0.02932726847313363, 0.6573305422463372, 0.13619708054378857, 0.30449386155494795,
      0.6215972903115824, 0.27848844240187404, 0.15340031661318151, 0.874653784847445, 0.20945830492422896,
      0.3146708145620842, 0.26407643609769327, 0.3869360073881614, 0.2686241578242969, 0.20706658426863045,
      0.2752227435846185, 0.034261276466779234, 0.05373621655163628, 0.09511890403956624, 0.09804057132410535,
      0.05362572101266044, 0.05468073573993203, 0.07445678501492935, 0.09978149095862175, 0.14565739961093166,
      0.38452273269691184, 0.9195939681650128, 0.15989447470995466, 0.7210303611407526, 0.4310846901264686,
      0.26562441989686086, 0.12516146761691674, 0.5112032713874709, 0.249520727359383, 0.5444372931632669,
      0.3507747104376001, 0.27463519358255517, 0.0817534807025239, 0.011576584074817728, 0.018866821549444718,
      0.4186102643880001, 0.4744910687391929, 0.3031222710742734, 0.040750804332251075, 0.17740136085015382,
      0.22204778354104693, 0.006139106164179213, 0.13514299607411262, 0.05571587701578061, 0.10100703041153813,
      0.5905746832247852, 0.30578458588775376, 0.1289279969751877, 0.053788631938904666, 0.019619104505375767,
      0.11489716489649425, 0.3341313138304011, 0.7013680067054678, 0.10174848249229748, 0.14361870011273287,
      0.014802900404734849, 0.03155114857634045, 0.10306394331615333, 0.046694230112904085, 0.3413430007248964,
      0.35025747939135043, 0.1971642221275918, 0.05059635767033867, 0.0560437742290555, 1.194197348853259,
      0.046443027987303896, 0.0684666249605326, 0.2441299558296086, 0.7204279294595479, 1.0122127650540542,
      0.25036274590019114, 0.44254313115233673, 0.06785856129426895, 0.26734374289650936, 0.06945782310590082,
      0.3071087266308161, 0.5755124728608338, 0.030892274455911726, 0.008173834306847174, 0.09786446400640378,
      0.6061244024343823, 0.5926781310970585, 0.16064218770364808, 0.13611985126222595, 0.1983153788350777,
      0.09745280643112939, 0.01107906177514319, 0.6163182904392654, 0.32084111348882105, 0.032911002983477766,
      0.3527796603960471, 0.17786992683808914, 0.007290102557576669, 0.15101890510315125, 0.12311380204072157,
      0.2721859482591726, 0.11812390238733203, 0.19112774656023182, 0.11028452517756845, 0.051125898831710676,
      0.05001541459643253, 0.5594253633568042, 0.4198541913980269, 0.7708909226380845, 0.023800901828545756,
      0.3756393357743378, 0.02925520028994269, 0.19016717371360317, 0.027138351295264665, 0.3825627691985969,
      0.09787423491255465, 0.5789507494740234, 0.2560098558878885, 0.025646232161093536, 0.018815542684444048,
      0.04554808898521922, 0.2312807691540807, 0.09772321583365338, 0.06286588480353335, 0.004943313098500859,
      0.2554390073284973, 0.07510184214782385, 0.2903648277322143, 0.16671388813415913, 0.7933443235894369,
      0.1616217612146574, 0.31714748350632926, 0.16128025930093984, 0.32755343536915554, 0.18353428627261548,
      0.283241501167221, 0.0469305014119542, 0.5590959996637507, 0.03341409609264922, 0.23467581007442626,
      0.691195972686197, 0.9127029055071327, 0.21717492109641937, 0.10490970998171403, 0.12784229293027996,
      0.14970600222604782, 0.12104814364111452, 0.855852482265668, 0.04582673234273258, 0.1824137613016361,
      0.02000798970826951, 0.3517833419983063, 0.2620903084031399, 0.1379414281821759, 0.865864162455311,
      0.06714112172822276, 0.5772039564401354, 0.38910776141872677, 0.3562857776630356, 0.5707752461634769,
      0.07799225323907573, 0.11924791722693182, 0.8140931810435327, 0.03087121948343345, 1.7707327400485706,
      0.43697905633759804, 0.2617130123375173, 0.17945685826251487, 0.42636711460157, 0.020846851886152915,
      0.35728445899794764, 0.12056768072809525, 0.27914992768454133, 0.16000270518038306, 0.28015667039899017,
      0.4147361635905784, 0.1837694470244201, 0.6181235101547706, 0.23279189143014348, 1.1952565882675539]
print(sorted(R2))
group, assoc = get_raws(R2, 0, max(R2), N)
print(group)
print(assoc)
print(sum([j for [_, _], j, _ in group]))
get_info(group, assoc, 0, max(R2))
# draw(sorted(R2), group, max(R2) / (1 + round(log2(N))))
save_to_docx(R2, group, assoc, "tables2.docx")

print("\nUniform: a = {}, b = {}".format(a, b))
# R3 = get_random_uniform(a, b, N)
R3 = [4.65840705571862, 4.420257548006654, 5.393888188539387, 3.274010388672346, 4.204657769907266, 2.9250917117397024,
      3.4951728529909665, 4.113448950277968, 4.993591738351783, 5.23084777718454, 3.448996797468727, 3.454200615538331,
      3.689806361149323, 4.161524131196435, 3.287543819702941, 5.5446038543483045, 4.0987328335342745, 5.366257117341565,
      2.8660535841030597, 3.8951013887566486, 5.232320554605571, 3.4508640634167342, 3.8469747750899472, 4.2286671960357545,
      3.918094882415702, 5.114338967177591, 4.440252675440497, 4.7917337712299375, 5.259951687189234, 5.034776550032198,
      3.9034200113064377, 4.205993006015655, 5.353010404863679, 5.598243920808832, 3.5802779256409787, 4.590045050089529,
      5.585354158813347, 3.3793348533770304, 4.448644124589002, 5.667867614630804, 3.2199789959973293, 5.688209421412798,
      3.0265739293625145, 3.570801953968255, 5.441121381766875, 4.8288601237411015, 4.153613173806962, 3.1780338586412116,
      5.650027122814071, 3.479819126582122, 4.989547335596693, 5.577682866894082, 3.873396460864196, 3.1313904575582203,
      2.9291638022659625, 4.197630571651428, 4.819156624622879, 4.3761710645338585, 2.7370381127971437, 4.836753434358202,
      4.73321164420458, 2.7191568126017214, 4.897729152937844, 3.5393847852320293, 3.8585286925506956, 4.7604665171793545,
      3.4028512458362843, 4.6342874293665215, 4.900726376618967, 4.78932881264754, 4.132274592103009, 4.165536490930938,
      4.396480332393881, 3.795991131283952, 4.50373655804192, 5.220668462258088, 4.900247810359216, 3.068576389263662,
      2.9799220821680916, 4.270565314507831, 2.838246292059477, 4.762833416584196, 3.7911195001005953, 4.30464441642631,
      3.047502160704089, 4.025265801978055, 5.004842873333405, 4.806604204646541, 5.345472995310553, 4.64705748485351,
      3.4173581355350193, 5.207542588486955, 4.161287281534463, 4.374982168151445, 5.499539683673589, 4.813717762198388,
      5.397317869989872, 4.451505393334735, 3.341062615423477, 5.692737779701442, 4.038335347133657, 4.956168375576906,
      2.728620586038532, 5.1908931529397, 3.540867053349194, 4.9743559151295, 2.910579857425479, 3.500021066095055,
      5.627066693423112, 5.446089826426385, 3.017821797338787, 3.15922374860412, 5.596031667846753, 2.753055466722463,
      3.8384908358052283, 3.555372792851492, 3.208389899152486, 5.07151312115572, 4.478080065710943, 3.797735580294957,
      4.346365298322795, 4.013320061008663, 3.090087573205447, 4.896864784658557, 4.944374957181058, 4.7187229179609,
      5.002801041836464, 3.6772409564566733, 3.0054122771579754, 5.659316957814481, 5.31688997688336, 4.846024257755182,
      3.8495281782143342, 3.7440874250320424, 2.753719481692434, 4.486464486173393, 4.05676471848082, 2.7632360720052747,
      3.163720435669471, 3.9461765629946335, 2.8631548588787483, 5.416482681222658, 3.0695750540589364, 5.271035577674073,
      5.596054447435174, 4.684939778133474, 4.479116414195616, 4.488977554867813, 4.452293666129478, 2.945888414748324,
      3.934843826561504, 5.370314593311615, 3.561239065258391, 3.6725551540052153, 5.2016014742101, 4.232620299531039,
      4.46141823906474, 2.8463499305932576, 3.289013922932611, 4.746750896326873, 3.425801089852949, 3.3105993699200593,
      4.9578419443771065, 3.3715853290082385, 3.8562190018813904, 4.400698629475236, 5.167632495497053, 3.1142442334349867,
      4.131972982832702, 3.918814655296016, 3.946386838954902, 5.082754026192324, 4.22342277181526, 3.848800645818856,
      3.0178991047387944, 5.693815901773608, 5.313660973437625, 4.334253454962535, 2.9374370203084936, 2.9185311421253286,
      4.578552159292001, 5.626212982471531, 4.139304711654384, 4.7887699992241215, 4.678171571654903, 5.681339619979619,
      2.8624385862461716, 2.7718029819293424, 4.756472071091242, 4.673436376723759, 3.3537373013337977, 5.1017268335460395,
      4.795836188879158, 3.3034385472394945, 4.295080040776272, 3.8439994095752352, 4.547236069254941, 5.374322968977419,
      4.436379238692899, 3.7563355300724437]
print(sorted(R3))
group, assoc = get_raws(R3, a, b, N)
print(group)
print(assoc)
print(sum([j for [_, _], j, _ in group]))
get_info(group, assoc, a, b)
# draw(sorted(R3), group, (b - a) / (1 + round(log2(N))))
save_to_docx(R3, group, assoc, "tables3.docx")